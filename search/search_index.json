{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gramps Web: research & organize your family tree together Gramps Web is a web app for collaborative genealogy. It is based on and interoperable with Gramps , the leading open source genealogy desktop application. Gramps Web is open source software and puts your privacy and your control of your research data first. Main features Browse all objects in your family tree: people, families, events, places, repositories, sources, citations, media objects, and notes Two different interactive pedigree views Display all places on an interactive map Blog section with blog articles stored in Gramps Switch the language of the interface between any of 40 languages Multi-user system with different levels of permissions Edit all objects collaboratively and add new objects Fully responsive & mobile friendly Snychronize with your local Gramps database and use Gramps desktop in parallel Planned features Export the tree as XML or GEDCOM from the web interface Generate any report supported by Gramps from the web interface","title":"Introduction"},{"location":"#gramps-web-research-organize-your-family-tree-together","text":"Gramps Web is a web app for collaborative genealogy. It is based on and interoperable with Gramps , the leading open source genealogy desktop application. Gramps Web is open source software and puts your privacy and your control of your research data first.","title":"Gramps Web: research &amp; organize your family tree together"},{"location":"#main-features","text":"Browse all objects in your family tree: people, families, events, places, repositories, sources, citations, media objects, and notes Two different interactive pedigree views Display all places on an interactive map Blog section with blog articles stored in Gramps Switch the language of the interface between any of 40 languages Multi-user system with different levels of permissions Edit all objects collaboratively and add new objects Fully responsive & mobile friendly Snychronize with your local Gramps database and use Gramps desktop in parallel","title":"Main features"},{"location":"#planned-features","text":"Export the tree as XML or GEDCOM from the web interface Generate any report supported by Gramps from the web interface","title":"Planned features"},{"location":"Configuration/","text":"Configuration Some configuration is necessary to run Gramps Web. Configuration file A configuration file is not mandatory as most settings can also be provided as environment variables. The basic setup shown in the Deployment docs works without one. When you use the Docker Compose based setup , you can include a configuration file by adding the following list item under the volumes: key in the grampsweb: block: - /path/to/config.cfg:/app/config/config.cfg where /path/to/config.cfg is the path to the config file in your server's file system (the right-hand side refers to the path in the container and must not be changed). Existing configuration settings The following configuration options exist. The last column indicates whether the option can be set from an environment variable. Required settings Key Description Set from environment TREE The name of the family tree database to use. Show available trees with gramps -l yes SECRET_KEY The secret key for flask. This must be set for use in production. The secret must not be shared publicly. Changing it will invalidate all access tokens yes Info You can generate a secure secret key e.g. with the command python3 -c \"import secrets;print(secrets.token_urlsafe(32))\" Optional settings Key Description Set from environment MEDIA_BASE_DIR Path to use as base directory for media files, overriding the media base directory set in Gramps yes SEARCH_INDEX_DIR Path for the full-text search index. Defaults to indexdir relative to the path where the script is run yes STATIC_PATH Path to serve static files from (e.g. a static web frontend) yes BASE_URL Base URL where the API can be reached (e.g. https://mygramps.mydomain.com/ ). This is necessary e.g. to build correct passwort reset links yes CORS_ORIGINS Origins where CORS requests are allowed from. By default, all are disallowed. Use \"*\" to allow requests from any domain. no EMAIL_HOST SMTP server host (e.g. for sending password reset e-mails) yes EMAIL_PORT SMTP server port. defaults to 465 yes EMAIL_HOST_USER SMTP server username yes EMAIL_HOST_PASSWORD SMTP server password yes EMAIL_USE_TLS Boolean, whether to use TLS for sending e-mails. Defaults to true no DEFAULT_FROM_EMAIL \"From\" address for automated e-mails yes THUMBNAIL_CACHE_CONFIG Dictionary with settings for the thumbnail cache. See Flask-Caching for possible settings. no Settings only during development Key Description Set from environment DISABLE_AUTH If True , disable the authentication system. Warning: never use this in a production environment, as it will allow read and write access from the public! no Example configuration file A minimal configuration file for production could look like this: TREE = \"My Family Tree\" BASE_URL = \"https://mytree.example.com\" SECRET_KEY = \"...\" # your secret key USER_DB_URI = \"sqlite:////path/to/users.sqlite\" EMAIL_HOST = \"mail.example.com\" EMAIL_PORT = 465 EMAIL_USE_TLS = True EMAIL_HOST_USER = \"gramps@example.com\" EMAIL_HOST_PASSWORD = \"...\" # your SMPT password DEFAULT_FROM_EMAIL = \"gramps@example.com\"","title":"Configuration"},{"location":"Configuration/#configuration","text":"Some configuration is necessary to run Gramps Web.","title":"Configuration"},{"location":"Configuration/#configuration-file","text":"A configuration file is not mandatory as most settings can also be provided as environment variables. The basic setup shown in the Deployment docs works without one. When you use the Docker Compose based setup , you can include a configuration file by adding the following list item under the volumes: key in the grampsweb: block: - /path/to/config.cfg:/app/config/config.cfg where /path/to/config.cfg is the path to the config file in your server's file system (the right-hand side refers to the path in the container and must not be changed).","title":"Configuration file"},{"location":"Configuration/#existing-configuration-settings","text":"The following configuration options exist. The last column indicates whether the option can be set from an environment variable.","title":"Existing configuration settings"},{"location":"Configuration/#required-settings","text":"Key Description Set from environment TREE The name of the family tree database to use. Show available trees with gramps -l yes SECRET_KEY The secret key for flask. This must be set for use in production. The secret must not be shared publicly. Changing it will invalidate all access tokens yes Info You can generate a secure secret key e.g. with the command python3 -c \"import secrets;print(secrets.token_urlsafe(32))\"","title":"Required settings"},{"location":"Configuration/#optional-settings","text":"Key Description Set from environment MEDIA_BASE_DIR Path to use as base directory for media files, overriding the media base directory set in Gramps yes SEARCH_INDEX_DIR Path for the full-text search index. Defaults to indexdir relative to the path where the script is run yes STATIC_PATH Path to serve static files from (e.g. a static web frontend) yes BASE_URL Base URL where the API can be reached (e.g. https://mygramps.mydomain.com/ ). This is necessary e.g. to build correct passwort reset links yes CORS_ORIGINS Origins where CORS requests are allowed from. By default, all are disallowed. Use \"*\" to allow requests from any domain. no EMAIL_HOST SMTP server host (e.g. for sending password reset e-mails) yes EMAIL_PORT SMTP server port. defaults to 465 yes EMAIL_HOST_USER SMTP server username yes EMAIL_HOST_PASSWORD SMTP server password yes EMAIL_USE_TLS Boolean, whether to use TLS for sending e-mails. Defaults to true no DEFAULT_FROM_EMAIL \"From\" address for automated e-mails yes THUMBNAIL_CACHE_CONFIG Dictionary with settings for the thumbnail cache. See Flask-Caching for possible settings. no","title":"Optional settings"},{"location":"Configuration/#settings-only-during-development","text":"Key Description Set from environment DISABLE_AUTH If True , disable the authentication system. Warning: never use this in a production environment, as it will allow read and write access from the public! no","title":"Settings only during development"},{"location":"Configuration/#example-configuration-file","text":"A minimal configuration file for production could look like this: TREE = \"My Family Tree\" BASE_URL = \"https://mytree.example.com\" SECRET_KEY = \"...\" # your secret key USER_DB_URI = \"sqlite:////path/to/users.sqlite\" EMAIL_HOST = \"mail.example.com\" EMAIL_PORT = 465 EMAIL_USE_TLS = True EMAIL_HOST_USER = \"gramps@example.com\" EMAIL_HOST_PASSWORD = \"...\" # your SMPT password DEFAULT_FROM_EMAIL = \"gramps@example.com\"","title":"Example configuration file"},{"location":"Deployment/","text":"Deploying Gramps Web with Docker The most convenient option to host Gramps Web is with Docker Compose. We will assume that Docker and Docker Compose are already installed in your system. Your can use Windows, Mac OS, or Linux as a host system. The supported architectures include not only x86-64 (desktop systems), but also ARM systems such as a Raspberry Pi, which can serve as a low-cost, but powerful (enough) web server. Note You do not need to install Gramps on the server as it is contained in the docker image. Step 1: Upload Gramps database Upload the Gramps database from your computer to the server. This is the directory that shows up before the family tree name when you run gramps -l . We will assume you will put it into the directory ~/gramps_db . Note This only works if you use Gramps 5.1 locally and the family tree uses SQLite (BSDDB is not supported). Alternatively, you can upload a Gramps XML export to the server and import it later. Step 2: Upload media files Upload your media files to the server. Make sure your Gramps database uses relative paths and not absolute paths as these will not work. We will assume the media base directory on your server will be located at ~/gramps_media . Note Use the \"Convert media paths from absolute to relative\" option in the \"Media Manager\" tool in Gramps' \"Tools\" menu if necessary. Step 3: Docker configuration Create a new file on the server named docker-compose.yml and insert the following contents: version : \"3.7\" services : grampsweb : image : dmstraub/gramps-webapi:latest restart : always ports : - \"80:5000\" environment : TREE : \"...\" # set the name of your family tree SECRET_KEY : \"...\" # set your secret key BASE_URL : \"http://localhost:5554\" GRAMPSJS_VERSION : \"v0.10.0\" volumes : - gramps_users:/app/users - gramps_index:/app/indexdir - gramps_thumb_cache:/app/thumbnail_cache - ~/gramps_db:/root/.gramps/grampsdb - ~/gramps_media:/app/media volumes : gramps_users : gramps_index : gramps_thumb_cache : This will generate three named volumes to make sure that the user database, search index, and thumbnail cache will persist, and will mount the Gramps database directory and the directory holding your media files into the container (the paths on the left-hand side of the colon : refer to your host machine, the ones on the right hand side to the container and should not be changed). For more configuration options, see Configuration . Warning The above will make the API available on port 80 of the host machine without SSL/TLS protection . You can use this for local testing, but do not expose this directly to the internet, it is completely insecure! Step 4: Secure access with SSL/TLS The web API must be served to the public internet over HTTPS. There are several options, e.g. Using docker hosting that includes SSL/TLS automatically Using an Nginx Reverse Proxy with a Let's Encrypt certificate A particularly convenient option is to use a dockerized Nginx reverse proxy with automated Let's Encrypt certificate generation. This is achieved with the following docker-compose.yml : version : \"3.7\" services : grampsweb : image : dmstraub/gramps-webapi:latest restart : always environment : VIRTUAL_PORT : \"5000\" VIRTUAL_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_EMAIL : ... # your email TREE : \"...\" # set the name of your family tree SECRET_KEY : \"...\" # set your secret key BASE_URL : \"http://localhost:5554\" GRAMPSJS_VERSION : \"v0.10.0\" volumes : - gramps_users:/app/users - gramps_index:/app/indexdir - gramps_thumb_cache:/app/thumbnail_cache - ~/gramps_db:/root/.gramps/grampsdb - ~/gramps_media:/app/media networks : - proxy-tier - default proxy : image : nginxproxy/nginx-proxy restart : always ports : - 80:80 - 443:443 environment : ENABLE_IPV6 : \"true\" volumes : - conf:/etc/nginx/conf.d - dhparam:/etc/nginx/dhparam - certs:/etc/nginx/certs:ro - vhost.d:/etc/nginx/vhost.d - html:/usr/share/nginx/html - /var/run/docker.sock:/tmp/docker.sock:ro networks : - proxy-tier acme-companion : image : nginxproxy/acme-companion container_name : nginx-proxy-acme restart : always volumes_from : - proxy volumes : - certs:/etc/nginx/certs:rw - acme:/etc/acme.sh - /var/run/docker.sock:/var/run/docker.sock:ro networks : - proxy-tier depends_on : - proxy volumes : acme : certs : conf : dhparam : vhost.d : html : gramps_users : gramps_index : gramps_thumb_cache : networks : proxy-tier : Please see the acme-companion docs for how to set up your domain. Step 5: Import database If you have copied the Gramps database directory directly in Step 1, you can skip this step. If you have uploaded a Gramps XML instead, you need to import it into a new family tree using the Gramps executable inside the docker container. This can be achieved with the command docker-compose run grampsweb \\ gramps -C 'My family tree' \\ -i /root/.gramps/grampsdb/my_tree.gramps \\ --config = database.backend:sqlite \\ --config = database.path:/root/.gramps/grampsdb where My family tree is the name of the new family tree (must match the setting in the config file) and my_tree.gramps the file name of the Gramps XML export. Step 6: Add users Initialize the user system by creating an administrator account with the command docker-compose run grampsweb \\ python3 -m gramps_webapi user add \\ --fullname 'My full name' \\ --email 'my@email' \\ --role 4 \\ my_username my_password See User system for more details and how to add additional users. Step 7: Start the server Run docker-compose up -d On first run, it will build the full-text search index that powers the app's search function.","title":"Deployment"},{"location":"Deployment/#deploying-gramps-web-with-docker","text":"The most convenient option to host Gramps Web is with Docker Compose. We will assume that Docker and Docker Compose are already installed in your system. Your can use Windows, Mac OS, or Linux as a host system. The supported architectures include not only x86-64 (desktop systems), but also ARM systems such as a Raspberry Pi, which can serve as a low-cost, but powerful (enough) web server. Note You do not need to install Gramps on the server as it is contained in the docker image.","title":"Deploying Gramps Web with Docker"},{"location":"Deployment/#step-1-upload-gramps-database","text":"Upload the Gramps database from your computer to the server. This is the directory that shows up before the family tree name when you run gramps -l . We will assume you will put it into the directory ~/gramps_db . Note This only works if you use Gramps 5.1 locally and the family tree uses SQLite (BSDDB is not supported). Alternatively, you can upload a Gramps XML export to the server and import it later.","title":"Step 1: Upload Gramps database"},{"location":"Deployment/#step-2-upload-media-files","text":"Upload your media files to the server. Make sure your Gramps database uses relative paths and not absolute paths as these will not work. We will assume the media base directory on your server will be located at ~/gramps_media . Note Use the \"Convert media paths from absolute to relative\" option in the \"Media Manager\" tool in Gramps' \"Tools\" menu if necessary.","title":"Step 2: Upload media files"},{"location":"Deployment/#step-3-docker-configuration","text":"Create a new file on the server named docker-compose.yml and insert the following contents: version : \"3.7\" services : grampsweb : image : dmstraub/gramps-webapi:latest restart : always ports : - \"80:5000\" environment : TREE : \"...\" # set the name of your family tree SECRET_KEY : \"...\" # set your secret key BASE_URL : \"http://localhost:5554\" GRAMPSJS_VERSION : \"v0.10.0\" volumes : - gramps_users:/app/users - gramps_index:/app/indexdir - gramps_thumb_cache:/app/thumbnail_cache - ~/gramps_db:/root/.gramps/grampsdb - ~/gramps_media:/app/media volumes : gramps_users : gramps_index : gramps_thumb_cache : This will generate three named volumes to make sure that the user database, search index, and thumbnail cache will persist, and will mount the Gramps database directory and the directory holding your media files into the container (the paths on the left-hand side of the colon : refer to your host machine, the ones on the right hand side to the container and should not be changed). For more configuration options, see Configuration . Warning The above will make the API available on port 80 of the host machine without SSL/TLS protection . You can use this for local testing, but do not expose this directly to the internet, it is completely insecure!","title":"Step 3: Docker configuration"},{"location":"Deployment/#step-4-secure-access-with-ssltls","text":"The web API must be served to the public internet over HTTPS. There are several options, e.g. Using docker hosting that includes SSL/TLS automatically Using an Nginx Reverse Proxy with a Let's Encrypt certificate A particularly convenient option is to use a dockerized Nginx reverse proxy with automated Let's Encrypt certificate generation. This is achieved with the following docker-compose.yml : version : \"3.7\" services : grampsweb : image : dmstraub/gramps-webapi:latest restart : always environment : VIRTUAL_PORT : \"5000\" VIRTUAL_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_EMAIL : ... # your email TREE : \"...\" # set the name of your family tree SECRET_KEY : \"...\" # set your secret key BASE_URL : \"http://localhost:5554\" GRAMPSJS_VERSION : \"v0.10.0\" volumes : - gramps_users:/app/users - gramps_index:/app/indexdir - gramps_thumb_cache:/app/thumbnail_cache - ~/gramps_db:/root/.gramps/grampsdb - ~/gramps_media:/app/media networks : - proxy-tier - default proxy : image : nginxproxy/nginx-proxy restart : always ports : - 80:80 - 443:443 environment : ENABLE_IPV6 : \"true\" volumes : - conf:/etc/nginx/conf.d - dhparam:/etc/nginx/dhparam - certs:/etc/nginx/certs:ro - vhost.d:/etc/nginx/vhost.d - html:/usr/share/nginx/html - /var/run/docker.sock:/tmp/docker.sock:ro networks : - proxy-tier acme-companion : image : nginxproxy/acme-companion container_name : nginx-proxy-acme restart : always volumes_from : - proxy volumes : - certs:/etc/nginx/certs:rw - acme:/etc/acme.sh - /var/run/docker.sock:/var/run/docker.sock:ro networks : - proxy-tier depends_on : - proxy volumes : acme : certs : conf : dhparam : vhost.d : html : gramps_users : gramps_index : gramps_thumb_cache : networks : proxy-tier : Please see the acme-companion docs for how to set up your domain.","title":"Step 4: Secure access with SSL/TLS"},{"location":"Deployment/#step-5-import-database","text":"If you have copied the Gramps database directory directly in Step 1, you can skip this step. If you have uploaded a Gramps XML instead, you need to import it into a new family tree using the Gramps executable inside the docker container. This can be achieved with the command docker-compose run grampsweb \\ gramps -C 'My family tree' \\ -i /root/.gramps/grampsdb/my_tree.gramps \\ --config = database.backend:sqlite \\ --config = database.path:/root/.gramps/grampsdb where My family tree is the name of the new family tree (must match the setting in the config file) and my_tree.gramps the file name of the Gramps XML export.","title":"Step 5: Import database"},{"location":"Deployment/#step-6-add-users","text":"Initialize the user system by creating an administrator account with the command docker-compose run grampsweb \\ python3 -m gramps_webapi user add \\ --fullname 'My full name' \\ --email 'my@email' \\ --role 4 \\ my_username my_password See User system for more details and how to add additional users.","title":"Step 6: Add users"},{"location":"Deployment/#step-7-start-the-server","text":"Run docker-compose up -d On first run, it will build the full-text search index that powers the app's search function.","title":"Step 7: Start the server"},{"location":"Users/","text":"User system Gramps Web is not meant to be exposed to the internet for public access, but only by authenticated users. User accounts can be created by the site owner via the command line or web interface, or by self-registration and subsequent approval by the site owner. User roles The following user roles are currently defined. Role Role ID Permissions Guest 0 View non-private objects Member 1 Guest + view private objects Contributor* 2 Member + add objects Editor 3 Contributor + edit and delete objects Owner 4 All: Editor + manage users * Note that the \"Contributor\" role is currently only partially supported; e.g., family objects cannot be added since they imply a modification of the underlying Gramps person objects of family members. It is recommended to use the other roles whenever possible. Managing users There are two ways to manage users: With owner permissions using the web interface On the command line on the server The owner account required to first access the web interface must always be added on the command line. Managing users on the command line When using Docker Compose , the basic command is docker-compose run grampsweb python3 -m gramps_webapi user COMMAND [ ARGS ] The COMMAND can be add or delete . Use --help for [ARGS] to show the syntax and possible configuration options.","title":"User system"},{"location":"Users/#user-system","text":"Gramps Web is not meant to be exposed to the internet for public access, but only by authenticated users. User accounts can be created by the site owner via the command line or web interface, or by self-registration and subsequent approval by the site owner.","title":"User system"},{"location":"Users/#user-roles","text":"The following user roles are currently defined. Role Role ID Permissions Guest 0 View non-private objects Member 1 Guest + view private objects Contributor* 2 Member + add objects Editor 3 Contributor + edit and delete objects Owner 4 All: Editor + manage users * Note that the \"Contributor\" role is currently only partially supported; e.g., family objects cannot be added since they imply a modification of the underlying Gramps person objects of family members. It is recommended to use the other roles whenever possible.","title":"User roles"},{"location":"Users/#managing-users","text":"There are two ways to manage users: With owner permissions using the web interface On the command line on the server The owner account required to first access the web interface must always be added on the command line.","title":"Managing users"},{"location":"Users/#managing-users-on-the-command-line","text":"When using Docker Compose , the basic command is docker-compose run grampsweb python3 -m gramps_webapi user COMMAND [ ARGS ] The COMMAND can be add or delete . Use --help for [ARGS] to show the syntax and possible configuration options.","title":"Managing users on the command line"},{"location":"requirements/","text":"Setup Requirements Gramps Web is a web app that runs on a server and is accessed via the web browser. It is meant to be made accessible to authenticated users via the internet. Server Requirements The most convenient way to host Gramps Web is via Docker Compose. While this is not possible with ordinary \"shared hosting\" providers, this makes it possible to host the app on Linux, Mac, or Windows; it can be hosted on a virtual server or on a Raspberry Pi (we provide Docker images for the ARM architecture) in your basement. Apart from Docker, you will also need some storage space to store your media files (images, documents). Finally, Gramps Web is only secure when served via HTTPS, so you will require an SSL/TLS certificate. The docs below show how to get one automatically for free from Let's Encrypt.","title":"Requirements"},{"location":"requirements/#setup-requirements","text":"Gramps Web is a web app that runs on a server and is accessed via the web browser. It is meant to be made accessible to authenticated users via the internet.","title":"Setup Requirements"},{"location":"requirements/#server-requirements","text":"The most convenient way to host Gramps Web is via Docker Compose. While this is not possible with ordinary \"shared hosting\" providers, this makes it possible to host the app on Linux, Mac, or Windows; it can be hosted on a virtual server or on a Raspberry Pi (we provide Docker images for the ARM architecture) in your basement. Apart from Docker, you will also need some storage space to store your media files (images, documents). Finally, Gramps Web is only secure when served via HTTPS, so you will require an SSL/TLS certificate. The docs below show how to get one automatically for free from Let's Encrypt.","title":"Server Requirements"},{"location":"dev-backend/","text":"Info This page still needs to be written. Please check back later or help out!","title":"Introduction"},{"location":"dev-backend/Development-instructions/","text":"Python version The web API only works with Python 3.6 or newer. Install Gramps The web API requires the Gramps Python library to be importable. Starting from Gramps 5.2.0, it will be installable via pip . For the time being, the two most convenient options are Use the apt package python3-gramps on Ubuntu Build your own wheel from Gramps master and install it into a virtual environment. Instructions: python3 -m venv gramps_webapi source gramps_webapi/bin/activate python3 -m pip install wheel git clone https://github.com/gramps-project/gramps.git cd gramps python3 setup.py bdist_wheel python3 -m pip install dist/*.whl Warning: Gramps master is an unstable development snapshot. Do not use it on your existing family tree. Install prerequisites To start development, please install the dependencies by running pip install requirements-dev.txt Set up pre-commit hooks To set up the pre-commit hooks for the repository, run pre-commit install in the repository root. This will make sure that all source files are nicely formatted with black . Run tests To run the unit tests, run pytest in the repository root. Install the library in editable mode Run pip install -e . --user Generate a configuration file Example content: TREE = \"My Family Tree\" DISABLE_AUTH = True Run the app in development mode Run python -m gramps_webapi --config path/to/config run The API will be accesible at http://127.0.0.1:5000 by default. To choose a different port, add the --port option.","title":"Development environment"},{"location":"dev-backend/Development-instructions/#python-version","text":"The web API only works with Python 3.6 or newer.","title":"Python version"},{"location":"dev-backend/Development-instructions/#install-gramps","text":"The web API requires the Gramps Python library to be importable. Starting from Gramps 5.2.0, it will be installable via pip . For the time being, the two most convenient options are Use the apt package python3-gramps on Ubuntu Build your own wheel from Gramps master and install it into a virtual environment. Instructions: python3 -m venv gramps_webapi source gramps_webapi/bin/activate python3 -m pip install wheel git clone https://github.com/gramps-project/gramps.git cd gramps python3 setup.py bdist_wheel python3 -m pip install dist/*.whl Warning: Gramps master is an unstable development snapshot. Do not use it on your existing family tree.","title":"Install Gramps"},{"location":"dev-backend/Development-instructions/#install-prerequisites","text":"To start development, please install the dependencies by running pip install requirements-dev.txt","title":"Install prerequisites"},{"location":"dev-backend/Development-instructions/#set-up-pre-commit-hooks","text":"To set up the pre-commit hooks for the repository, run pre-commit install in the repository root. This will make sure that all source files are nicely formatted with black .","title":"Set up pre-commit hooks"},{"location":"dev-backend/Development-instructions/#run-tests","text":"To run the unit tests, run pytest in the repository root.","title":"Run tests"},{"location":"dev-backend/Development-instructions/#install-the-library-in-editable-mode","text":"Run pip install -e . --user","title":"Install the library in editable mode"},{"location":"dev-backend/Development-instructions/#generate-a-configuration-file","text":"Example content: TREE = \"My Family Tree\" DISABLE_AUTH = True","title":"Generate a configuration file"},{"location":"dev-backend/Development-instructions/#run-the-app-in-development-mode","text":"Run python -m gramps_webapi --config path/to/config run The API will be accesible at http://127.0.0.1:5000 by default. To choose a different port, add the --port option.","title":"Run the app in development mode"},{"location":"dev-backend/Testing/","text":"Testing the API locally On Linux, you can try out the Gramps Web API locally with your existing family tree by installing and running the Python application. The following assumes that your Python 3 executabe is called python3 . Install First, make sure you have installed Gramps and can import the Python package. Running python3 -c 'import gramps' on the command line should not return an error. Then, install the gramps-webapi Python package as python3 -m pip install --user gramps-webapi Configure Before running the application, we need to create a minimal configuration file. Warning Do not use this configuration in production. Create a file test.cfg with the content TREE=\"My Family Tree\" DISABLE_AUTH=True replacing My Family Tree with the name of your family tree database. Use gramps -l to list admissible names. Run Warning Please back up your family tree before starting to test the Web API on your research data. Note When running the Python application directly, please close Gramps desktop before starting the API, even though modifying the database will fail as it is locked (so the database cannot be corrupted). Now, you can run the Web API with the command python3 -O -m gramps_webapi --config test.cfg run --port 5555 You can now start interacting with the API at http://localhost:5555/api . Warning Do not expose this as-is to a public network or the internet, as anyone will be able to view and modify your family tree!","title":"Testing the API locally"},{"location":"dev-backend/Testing/#testing-the-api-locally","text":"On Linux, you can try out the Gramps Web API locally with your existing family tree by installing and running the Python application. The following assumes that your Python 3 executabe is called python3 .","title":"Testing the API locally"},{"location":"dev-backend/Testing/#install","text":"First, make sure you have installed Gramps and can import the Python package. Running python3 -c 'import gramps' on the command line should not return an error. Then, install the gramps-webapi Python package as python3 -m pip install --user gramps-webapi","title":"Install"},{"location":"dev-backend/Testing/#configure","text":"Before running the application, we need to create a minimal configuration file. Warning Do not use this configuration in production. Create a file test.cfg with the content TREE=\"My Family Tree\" DISABLE_AUTH=True replacing My Family Tree with the name of your family tree database. Use gramps -l to list admissible names.","title":"Configure"},{"location":"dev-backend/Testing/#run","text":"Warning Please back up your family tree before starting to test the Web API on your research data. Note When running the Python application directly, please close Gramps desktop before starting the API, even though modifying the database will fail as it is locked (so the database cannot be corrupted). Now, you can run the Web API with the command python3 -O -m gramps_webapi --config test.cfg run --port 5555 You can now start interacting with the API at http://localhost:5555/api . Warning Do not expose this as-is to a public network or the internet, as anyone will be able to view and modify your family tree!","title":"Run"},{"location":"dev-backend/api/","text":"API specification The full API specification for the Gramps Web API can be found on Swagger .","title":"API specification"},{"location":"dev-backend/api/#api-specification","text":"The full API specification for the Gramps Web API can be found on Swagger .","title":"API specification"},{"location":"dev-frontend/","text":"Info This page still needs to be written. Please check back later or help out!","title":"Introduction"},{"location":"user-guide/","text":"Info This page still needs to be written. Please check back later or help out!","title":"Introduction"}]}